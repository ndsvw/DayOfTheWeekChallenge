@using Microsoft.Extensions.Logging;
@using System.Diagnostics;
@inject ILogger<GenericChallenge<TAnswer>> logger;
@inject IJSRuntime JS;

<style>
    #challenge {
        border: 1px solid white;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
    }

    .challenge-green-border {
        animation-name: challenge-animation-green;
        animation-duration: 1.5s;
    }

    @@keyframes challenge-animation-green {
        from {
            border-color: green;
        }

        to {
            border-color: white;
        }
    }

    .challenge-red-border {
        animation-name: challenge-animation-red;
        animation-duration: 1.5s;
    }

    @@keyframes challenge-animation-red {
        from {
            border-color: red;
        }

        to {
            border-color: white;
        }
    }
</style>

<div class="noselect pt-2 pb-2" id="challenge" @ref="challengeElement">
    <div class="alert alert-primary font-weight-bold ml-4 mr-2" role="alert" style="display: inline-block">@Question</div>
    <i class="fas fa-redo border rounded-circle p-2" style="cursor: pointer;" @onclick="GenerateNewQuestion"></i>

    <div>
        @foreach (var answerOption in AnswerOptions)
        {
            <AnswerOptionButton TAnswer="TAnswer"
                                Value="@answerOption"
                                Selected="@(Equals(answerOption, ChoosenAnswer))"
                                OnClickCallback=ChooseAnswer
                                ConvertValue="ConvertValue" />
        }
    </div>
</div>

@typeparam TAnswer

@code{
    private Stopwatch m_Stopwatch = new Stopwatch();

    private ElementReference challengeElement;

    [Parameter]
    public IEnumerable<TAnswer> AnswerOptions { get; set; }

    [Parameter]
    public Func<TAnswer, string> ConvertValue { get; set; }

    [Parameter]
    // generates a question and the corresponding answer.
    public Func<QuestionAnswerPair<TAnswer>> QuestionGenerator { get; set; }

    [Parameter]
    public EventCallback<UserAnswer<TAnswer>> OnAnswerCallback { get; set; }

    private TAnswer ChoosenAnswer { get; set; }

    private TAnswer CorrectAnswer { get; set; }

    private string Question { get; set; }

    private async void ChooseAnswer(TAnswer pAnswer)
    {
        m_Stopwatch.Stop();
        ChoosenAnswer = pAnswer;

        var isAnswerCorrect = Equals(CorrectAnswer, ChoosenAnswer);

        if (isAnswerCorrect)
            logger.LogInformation("correct");
        else
            logger.LogInformation("wrong. it was " + CorrectAnswer);

        var userAnswer = new UserAnswer<TAnswer>
        {
            AnsweredCorrectly = isAnswerCorrect,
            Question = Question,
            CorrectAnswer = CorrectAnswer,
            GivenAnswer = pAnswer,
            Time = m_Stopwatch.Elapsed
        };
        GenerateNewQuestion();
        await JS.InvokeVoidAsync("RemoveClassFromElement", challengeElement, "challenge-red-border");
        await JS.InvokeVoidAsync("RemoveClassFromElement", challengeElement, "challenge-green-border");
        await JS.InvokeVoidAsync("AddClassToElement", challengeElement, isAnswerCorrect ? "challenge-green-border" : "challenge-red-border");

        await OnAnswerCallback.InvokeAsync(userAnswer);
    }

    private void GenerateNewQuestion()
    {
        var questionAndAnswer = QuestionGenerator();
        Question = questionAndAnswer.Question;
        CorrectAnswer = questionAndAnswer.Answer;
        ChoosenAnswer = default;
        m_Stopwatch.Restart();
    }

    protected override void OnInitialized()
    {
        GenerateNewQuestion();
    }
}