@page "/challenge/{yearrange}"
@using Core;
@using Microsoft.Extensions.Logging;
@using System.Globalization;
@inject ILogger<DotwChallenge> logger;
@inject ISettings settings;

<div class="container text-center">
    <h1>DayOfTheWeek Challenge</h1>

    <GenericChallenge TAnswer="int?"
                      AnswerOptions="@(GetAnswerOptionsBySettings(settings))"
                      QuestionGenerator="@GenerateQuestion"
                      OnAnswerCallback="OnAnswered"
                      ConvertValue="@DetermineFormatter(settings)" />

    <AnswerHistory TAnswer="int?"
                   UserAnswers="@m_UserAnswers"
                   class="mt-5"
                   ConvertValue="@DetermineFormatter(settings)" />
</div>

@code {

    private (int startYear, int endYear) m_YearRange;

    private List<UserAnswer<int?>> m_UserAnswers = new List<UserAnswer<int?>>();

    private static int?[] m_NumericOrder = new int?[] { 0, 1, 2, 3, 4, 5, 6 };

    private static int?[] m_EfficientNumericOrder = new int?[] { 4, 5, 6, 0, 1, 2, 3 };

    private static int?[] m_FromMondayOrder = new int?[] { 1, 2, 3, 4, 5, 6, 0 };

    private static int?[] m_FromSundayOrder = new int?[] { 0, 1, 2, 3, 4, 5, 6 };

    private static string[] m_DaysOfTheWeek = new[]{
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    };

    private static string ConvertToString(int? p)
    {
        return p.ToString();
    }

    private static string ConvertToEfficientNumberString(int? p)
    {
        return (p >= 4 ? p - 7 : p).ToString();
    }

    private static string ConvertToDayOfWeekString(int? p)
    {
        if (p == null)
            return String.Empty;
        return m_DaysOfTheWeek[p.Value];
    }

    [Parameter]
    public string YearRange { set => m_YearRange = DetermineYearRangeFromString(value); }

    private (int startYear, int endYear) DetermineYearRangeFromString(string pInput)
    {
        int start = 0;
        int end = 0;
        var parts = pInput.Split('-');
        if (parts.Length == 1 && Int32.TryParse(pInput, out start))
            return (start, start);
        if (parts.Length == 2 && Int32.TryParse(parts[0], out start) && Int32.TryParse(parts[1], out end))
            return (start, end);
        throw new NotImplementedException("Could not get range from parameter");
    }

    public QuestionAnswerPair<int?> GenerateQuestion()
    {
        var randomDate = RandomDateGenerator.Generate(m_YearRange.startYear, m_YearRange.endYear);

        var answer = (int?)randomDate.DayOfWeek;
        return new QuestionAnswerPair<int?>($"{randomDate.ToString("d", CultureInfo.CurrentCulture)}", answer);
    }

    private int?[] GetAnswerOptionsBySettings(ISettings pSettings)
    {
        if (!pSettings.PreferNumbericAnswers)
        {
            if (pSettings.IsSundayFirstDotw)
                return m_FromSundayOrder;
            else
                return m_FromMondayOrder;
        }

        if (pSettings.PreferEfficientNumbers)
            return m_EfficientNumericOrder;

        return m_NumericOrder;
    }

    private Func<int?, string> DetermineFormatter(ISettings pSettings)
    {
        if (!pSettings.PreferNumbericAnswers)
            return ConvertToDayOfWeekString;

        if (pSettings.PreferEfficientNumbers)
            return ConvertToEfficientNumberString;

        return ConvertToString;
    }

    public void OnAnswered(UserAnswer<int?> pUserAnswer)
    {
        m_UserAnswers.Add(pUserAnswer);
    }

}